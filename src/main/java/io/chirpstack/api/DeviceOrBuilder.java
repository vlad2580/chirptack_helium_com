// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/device.proto

package io.chirpstack.api;

public interface DeviceOrBuilder extends
    // @@protoc_insertion_point(interface_extends:api.Device)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * DevEUI (EUI64).
   * </pre>
   *
   * <code>string dev_eui = 1;</code>
   * @return The devEui.
   */
  String getDevEui();
  /**
   * <pre>
   * DevEUI (EUI64).
   * </pre>
   *
   * <code>string dev_eui = 1;</code>
   * @return The bytes for devEui.
   */
  com.google.protobuf.ByteString
      getDevEuiBytes();

  /**
   * <pre>
   * Name.
   * </pre>
   *
   * <code>string name = 2;</code>
   * @return The name.
   */
  String getName();
  /**
   * <pre>
   * Name.
   * </pre>
   *
   * <code>string name = 2;</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * Description.
   * </pre>
   *
   * <code>string description = 3;</code>
   * @return The description.
   */
  String getDescription();
  /**
   * <pre>
   * Description.
   * </pre>
   *
   * <code>string description = 3;</code>
   * @return The bytes for description.
   */
  com.google.protobuf.ByteString
      getDescriptionBytes();

  /**
   * <pre>
   * Application ID (UUID).
   * </pre>
   *
   * <code>string application_id = 4;</code>
   * @return The applicationId.
   */
  String getApplicationId();
  /**
   * <pre>
   * Application ID (UUID).
   * </pre>
   *
   * <code>string application_id = 4;</code>
   * @return The bytes for applicationId.
   */
  com.google.protobuf.ByteString
      getApplicationIdBytes();

  /**
   * <pre>
   * Device-profile ID (UUID).
   * </pre>
   *
   * <code>string device_profile_id = 5;</code>
   * @return The deviceProfileId.
   */
  String getDeviceProfileId();
  /**
   * <pre>
   * Device-profile ID (UUID).
   * </pre>
   *
   * <code>string device_profile_id = 5;</code>
   * @return The bytes for deviceProfileId.
   */
  com.google.protobuf.ByteString
      getDeviceProfileIdBytes();

  /**
   * <pre>
   * Skip frame-counter checks (this is insecure, but could be helpful for debugging).
   * </pre>
   *
   * <code>bool skip_fcnt_check = 6;</code>
   * @return The skipFcntCheck.
   */
  boolean getSkipFcntCheck();

  /**
   * <pre>
   * Device is disabled.
   * </pre>
   *
   * <code>bool is_disabled = 7;</code>
   * @return The isDisabled.
   */
  boolean getIsDisabled();

  /**
   * <pre>
   * Variables (user defined).
   * These variables can be used together with integrations to store tokens /
   * secrets that must be configured per device. These variables are not
   * exposed in the event payloads.
   * </pre>
   *
   * <code>map&lt;string, string&gt; variables = 8;</code>
   */
  int getVariablesCount();
  /**
   * <pre>
   * Variables (user defined).
   * These variables can be used together with integrations to store tokens /
   * secrets that must be configured per device. These variables are not
   * exposed in the event payloads.
   * </pre>
   *
   * <code>map&lt;string, string&gt; variables = 8;</code>
   */
  boolean containsVariables(
      String key);
  /**
   * Use {@link #getVariablesMap()} instead.
   */
  @Deprecated
  java.util.Map<String, String>
  getVariables();
  /**
   * <pre>
   * Variables (user defined).
   * These variables can be used together with integrations to store tokens /
   * secrets that must be configured per device. These variables are not
   * exposed in the event payloads.
   * </pre>
   *
   * <code>map&lt;string, string&gt; variables = 8;</code>
   */
  java.util.Map<String, String>
  getVariablesMap();
  /**
   * <pre>
   * Variables (user defined).
   * These variables can be used together with integrations to store tokens /
   * secrets that must be configured per device. These variables are not
   * exposed in the event payloads.
   * </pre>
   *
   * <code>map&lt;string, string&gt; variables = 8;</code>
   */
  /* nullable */
String getVariablesOrDefault(
      String key,
      /* nullable */
String defaultValue);
  /**
   * <pre>
   * Variables (user defined).
   * These variables can be used together with integrations to store tokens /
   * secrets that must be configured per device. These variables are not
   * exposed in the event payloads.
   * </pre>
   *
   * <code>map&lt;string, string&gt; variables = 8;</code>
   */
  String getVariablesOrThrow(
      String key);

  /**
   * <pre>
   * Tags (user defined).
   * These tags are exposed in the event payloads or to integration. Tags are
   * intended for aggregation and filtering.
   * </pre>
   *
   * <code>map&lt;string, string&gt; tags = 9;</code>
   */
  int getTagsCount();
  /**
   * <pre>
   * Tags (user defined).
   * These tags are exposed in the event payloads or to integration. Tags are
   * intended for aggregation and filtering.
   * </pre>
   *
   * <code>map&lt;string, string&gt; tags = 9;</code>
   */
  boolean containsTags(
      String key);
  /**
   * Use {@link #getTagsMap()} instead.
   */
  @Deprecated
  java.util.Map<String, String>
  getTags();
  /**
   * <pre>
   * Tags (user defined).
   * These tags are exposed in the event payloads or to integration. Tags are
   * intended for aggregation and filtering.
   * </pre>
   *
   * <code>map&lt;string, string&gt; tags = 9;</code>
   */
  java.util.Map<String, String>
  getTagsMap();
  /**
   * <pre>
   * Tags (user defined).
   * These tags are exposed in the event payloads or to integration. Tags are
   * intended for aggregation and filtering.
   * </pre>
   *
   * <code>map&lt;string, string&gt; tags = 9;</code>
   */
  /* nullable */
String getTagsOrDefault(
      String key,
      /* nullable */
String defaultValue);
  /**
   * <pre>
   * Tags (user defined).
   * These tags are exposed in the event payloads or to integration. Tags are
   * intended for aggregation and filtering.
   * </pre>
   *
   * <code>map&lt;string, string&gt; tags = 9;</code>
   */
  String getTagsOrThrow(
      String key);
}
